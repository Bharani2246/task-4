import java.io.File;
import java.util.List;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.recommender.UserBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;

public class RecommenderDemo {
    public static void main(String[] args) {
        try {
            // ✅ Load data
            DataModel model = new FileDataModel(new File("data/ratings.csv"));
            
            // ✅ Compute similarity between users
            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
            
            // ✅ Define the neighborhood of 2 nearest users
            UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);
            
            // ✅ Build the recommender
            UserBasedRecommender recommender =
                    new GenericUserBasedRecommender(model, neighborhood, similarity);
            
            // ✅ Generate recommendations
            int userId = 2;
            int howMany = 3;
            List<RecommendedItem> recs = recommender.recommend(userId, howMany);
            
            System.out.println("Recommendations for user " + userId + ":");
            for (RecommendedItem r : recs) {
                System.out.printf("  Item %d (predicted rating: %.2f)%n",
                                  r.getItemID(), r.getValue());
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
